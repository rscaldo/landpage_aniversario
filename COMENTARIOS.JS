/**
 * 
 AULA 1
 VAMOS REALIZAR O PROJETO UTILIZANDO UM NOVO COMPILADOR QUE SE CHAMA PARCEL, AUXILIANDO NA COMPILAÇÃO DE TAREFAS

 NO TERMINAL: npm init --yes
 UM ARQUIVO package.json FOI CRIADO, DEPOIS DEVEMOS INSTALAR O PARCEL
 npm i --save-dev parcel
 A PASTA node_modules E O ARQUIVO package-lock.json FORAM CRIADOS

 DEPOIS TEMOS QUE CRIAR A ESTRUTURA DA NOSSA PÁGINA, NA PASTA SRC CRIAMOS O ARQUIVO index.html, A PASTA SCRIPTS/main.js E SYTLES/main.scss

 NO package.json TEMOS QUE ADICIONAR 2 SCRIPTS, UM PARA DEVENVOLVIMENTO APONTANDO PARA OS SEGUINTES ARQUIVOS:
 "dev":"parcel src/index.html src/styles/main.scss src/scripts/main.js",

 AGORA NO TERMINAL TEMOS QUE RODAR O COMANDO npm run dev
 VÃO SER CRIADAS AS PASTAS .parcel-cache e a dist

 O PARCEL JÁ FAZ O ACOMPANHAMENTO DE ATUALIZAÇÃO DO ARQUIVO, PORTANTO NÃO VAMOS PRECISAR O PARCEL, TEMOS QUE COLOCAR O ENDEREÇO FORNECIDO PELO PARCEL NO TERMINAL PARA ACOMPANHAR O PROJETO

 TEMOS QUE MIMIFICAR AS IMAGENS NA RAIZ DO SITE VAMOS CRIAR MAIS UM ARQUIVO CHAMADO sharp.config.json, NESTE ARQUIVO VAMOS ESCREVER:
 {
  "png":{
    "quality": 75
  }
 }

 EXPLICANDO
 png: POIS ESSE É O FORMATO DOS ARQUIVOS
 quality: VAMOS COLOCAR UM VALOR DE QUILIDADE QUE VAI SER ENTENDIDO COMO PORCENTAGEM

 O PARCEL TRABALHA POR DEMANDA E SÓ VAI COMPILAR AS FOTOS QUANDO ELAS FOREM USADAS NO HTML

 PARA IMPORTAR O SASS COM O PARCEL NÃO PRECISAMOS COMPILAR O SASS, TEMOS QUE NO ARQUIVO HTML APONTAR DIRETAMENTE PARA O ARQUIVO SASS QUE ESTA DENTRO DA PASTA SRC

 NO .gitignore TEMOS QUE COLOCAR AS SEGUINTES PASTAS 
 .parcel-cache
dist
node_modules


AULA 2

PARA DENTRALIZAR A IAMGEM COM O MARGIN 0 AUTO ELA DEVE ESTAR COM O DISPLAY BLOCK

COMO A IMAGEM ESTÁ MUITO CLARA PODEMOS CRIAR UM OVERLAY, UM ELEMENTO PRETO COM UMA OPACIDADE PARA MELHORAR A VISIBILIDADE

&::before{
  content:''
  position:absolute;
  top:0
  left:0
  width:100%
  height:100%
  background-color:#000
  opacity: 0.7;

}

TEMOS QUE ADICIONAR O POSITION RELATIVE NO .hero E NO .container


AULA 3

VAMOS CRIAR UM NOVA PASTA COM O NOME components  E DEPOIS UM ARQUIVO CHAMADO _infos_bar.scss


AULA 5 

VAMOS UTILIZAR UMA BIBLIOTECA PARA ADIONAR ALGUMAS ANIMAÇÕES AO NOSSO PROJETO. AOS NO SITE
https://michalsnik.github.io/aos/
ESSE LIBRARY TEM VARIOS TIPOS DE ANIMAÇÃO QUE VÃO AONTECENDO QUANDO DAMOS SCROLL
TEMOS QUE IR NO GITHUB E IR NA PARTE DE INSTALLATION, TEMOS QUE ADICIONAR UMA LINHA NO HEAD
  <link rel="stylesheet" href="https://unpkg.com/aos@next/dist/aos.css" />

DEPOIS IMPORTAR UMA LINHA NO JS ANTES DO MAIN, MAS AQUI NÃO PRECISAMOS COPIAR O CODIGO TODO POIS TEMOS UM ARQUIVO DE JS SEPARADO
  <script src="https://unpkg.com/aos@next/dist/aos.js"></script>

  COLOCAMOS ESSA PARTE DE DEPOIS ADICIONAMOS  AOS.init(); NO NOSSO MAIN.JS

  PARA UTILIZAR NESSE RECURSO NO HTML TEMOS QUE ADICONAR UM ATRIBUTO data-aos="EFEITO ESCOLHIDO"


  AULA 6

  NO JS TEMOS A MANIPULAÇÃO DE DATA ATRAVES DE:
  DATA DE HOJE >> var hoje = new Date()

  console.log(hoje)

  MAS PARA NOSSO PROPÓSITO VAMOS PRECISAR DA FUNÇÃO .getTime(), QUE VAI RETORNAR UM TIMESTAMP

  PARA CRIAR NOSSO CRONOMETRO, VAMOS COLOCAR UM span NO HATML COM UM ID, DEPOIS VAMOS PARA O MAIN.JS

  //CRIAMOS UMA VARIAVEL TIPO DATA APONTANDO PARA UMA DATA NO FUTURO
const dataDoEvento = new Date('Dec 12, 2023 19:00:00')


//AGORA VAMOS RECUPERAR O TIMESTAMP DESSA DATA NO FUTUTO
const timeStampDoEvento = dataDoEvento.getTime();

PARA IR RECUPERANDO UM INTERVALO DE 1 SEGUNDO, TEMOS UMA FUNÇÃO QUE VAI FICAR SENDO EXECUTADA A CADA SEGUNDO, 


O ULTIMO PASSO É SUBIR PARA VERCEL, PARA ISSO TEMOS QUE CRIAR UM SCRIPT DE BIULD NO PACKAGE.JSON

"biuld":"parcel build scr/index.html"

DENTRO DO package.js TEMOS QUE REMOVER A SEGUINTE LINHA:
 "main": "index.js",

 NO VERCEL ELE RECONHECE QUE O PARCEL FAZ PARTE DO PROJETO, NO BUILD ELE JÁ TRAZ ALGUMAS CONFIGURAÇÃO, PORTANTO BASTA REALIZAR O DEPLOY
 */
